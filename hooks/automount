run_hook ()
{
    if [ "x$loopfile" != "x" ]; then
	mount_handler="loop_mount_handler"
    fi
}

# $1 /new_root
loop_mount_handler ()
{
    # 启动参数指定 real_root=loop=/dev/sda1 loopfile=Arch/archlive.disk
    # 或者指定 real_root=loop=/dev/disk/by-label/C loopfile=Arch/archlive.disk   (label有中文得时候会出错)
    # 或者指定 real_root=loop=/dev/disk/by-uuid/047C-F52A loopfile=Arch/archlive.disk
    #               上面的例子中"sda1"  "C"  "047C-F52A" 根据具体情况对应替代，或者用*花建议得grub2自动探测
    #echo "run automount hook begin"

    if [ "x$1" = "x" ]; then
	UNION="/new_root"
    else
	UNION="$1"
    fi

    # 保险点， 根据Arch目前风格，再检测、创建目录
    if [ "x$HOST" = "x" ]; then HOST="/host"; fi
    if [ ! -d $HOST ]; then mkdir -p $HOST; fi
    if [ ! -d $UNION ]; then mkdir -p $UNION; fi

    case ${real_root} in loop\=*) 
	loop=${real_root/loop=}
	case $loop in *by-uuid*) 
		if [ ! -e $loop ]; then
			loop_lowercase="$(dirname $loop)/$(echo $(basename $loop) | tr [:upper:] [:lower:])"
			loop_uppercase="$(dirname $loop)/$(echo $(basename $loop) | tr [:lower:] [:upper:])"
			if [ -e ${loop_lowercase} ]; then
				loop="${loop_lowercase}"
			elif [ -e ${loop_uppercase} ]; then
				loop="${loop_uppercase}"
			fi
		fi
		;;
	esac
	if [ -e $loop ]; then
		fstype=$(blkid -u filesystem -o value -s TYPE -p "${loop}")
		fsopt="-t $fstype"
		MOUNT="mount"
		if [ "${readwrite}" = "no" ]; then rwopt="ro"; else rwopt="rw"; fi
		case $fstype in
			ntfs)  MOUNT="mount.ntfs-3g"
				rwopt="rw"
				fsopt=""
				;;
			vfat)   rwopt="rw"
			;;
			squashfs|iso9660|udf) rwopt="ro"
			;;
			esac
		if [ "x$mountopts" != "x" ]; then
			mountopts="-o $mountopts,$rwopt"
		else
			mountopts="-o $rwopt"
		fi
		$MOUNT $fsopt $mountopts $loop  $HOST

		if [ -f $HOST/$loopfile ]; then
			loopfile="$HOST/$loopfile"
			fstype=$(blkid -u filesystem -o value -s TYPE -p "${loopfile}")
			if [ "${fstype}" = "squashfs" ]; then rwopt="ro"; fi
			#echo "mount -t $fstype -o loop,$rwopt $loopfile $UNION"
			mount -t $fstype -o loop,$rwopt $loopfile $UNION
            		if [ $? -eq 0 ] ; then
                		echo "mkdir -p $UNION$HOST"
               			mkdir -p $UNION$HOST
				# 将存放loop的分区挂载到目标系统的/host目录下，跟wubi的处理方式相同
                		#echo "mount -o bind $HOST $UNION$HOST"
                		mount -o bind $HOST $UNION$HOST
                		MOUNTED=1
            		else
                		echo " mount -t $fstype -o loop,$rwopt $loopfile $UNION   error"
            		fi
       		 else
            		echo "$HOST/$loopfile  is not file"
		fi
	else
		echo "${loop} not exist!"
	fi
	;;
	esac
    #echo "run automount hook end"
}
